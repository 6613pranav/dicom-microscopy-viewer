{"version":3,"file":"dicom-microscopy-viewer.js","sources":["../src/metadata.js","../src/api.js","../src/dicom-microscopy-viewer.js"],"sourcesContent":["\nfunction formatImageMetadata(metadata) {\n\n  const sopClassUID = metadata['00080016']['Value'][0];\n  if (sopClassUID !== '1.2.840.10008.5.1.4.1.1.77.1.6') {\n    console.error('SOP Class UID \"' + sopClassUID + '\" is not supported')\n  }\n\n  const imageType = metadata['00080008']['Value'];\n  if ( imageType[2] !== 'VOLUME' ) {\n    console.error('expected image type value 3 to be \"VOLUME\", is \"' + imageType[2] + '\" instead')\n  }\n\n  const sopInstanceUID = metadata['00080018']['Value'][0];\n  const rows = metadata['00280010']['Value'][0];\n  const columns = metadata['00280011']['Value'][0];\n  const totalPixelMatrixColumns = metadata['00480006']['Value'][0];\n  const totalPixelMatrixRows = metadata['00480007']['Value'][0];\n  const imageVolumeHeight = metadata['00480002']['Value'][0];\n  const imageVolumeWidth = metadata['00480001']['Value'][0];\n  const sharedFunctionalGroupsSequence = metadata['52009229']['Value'][0];\n  const pixelMeasuresSequence = sharedFunctionalGroupsSequence['00289110']['Value'][0];\n  const pixelSpacing = pixelMeasuresSequence['00280030']['Value'];\n  const numberOfFrames = Number(metadata['00280008']['Value'][0]);\n\n  /*\n   * The values \"TILED_SPARSE\" and \"TILED_FULL\" were introduced in the 2018\n   * of the standard. Older datasets are equivalent to \"TILED_SPARSE\"\n   * even though they may not have a value or a different value.\n  */\n  try {\n    var dimensionOrganizationType = metadata['00209311']['Value'][0];\n  } catch (err) {\n    var dimensionOrganizationType = 'TILED_SPARSE';\n  }\n\n  const imageOrientationSlide = metadata['00480102']['Value'];\n\n  let tilesPerRow = Math.ceil(totalPixelMatrixColumns / columns);\n  let tilesPerColumn = Math.ceil(totalPixelMatrixRows / rows);\n  const frameMapping = {};\n  if (dimensionOrganizationType === 'TILED_FULL') {\n    let frameOffsetNumber = 0;\n    if ('00209161' in metadata) {\n        frameOffsetNumber = Number(metadata['00209228']['Value'][0]);\n    }\n    let offset = frameOffsetNumber + 1;\n    let limit = frameOffsetNumber + numberOfFrames;\n    for (let j = offset; j <= limit; j++) {\n      let rowIndex = Math.ceil(j / tilesPerRow);\n      let rowFraction = 1 - (rowIndex - (j / tilesPerRow));\n      let colIndex = Math.ceil(totalPixelMatrixColumns * rowFraction / columns);\n      let index = rowIndex + '-' + colIndex;\n      let frameNumber = j - offset + 1;\n      frameMapping[index] = frameNumber;\n    }\n  } else {\n    const perFrameFunctionalGroupsSequence = metadata['52009230']['Value'];\n    for (let j = 0; j < numberOfFrames; j++) {\n      let planePositionSlideSequence = perFrameFunctionalGroupsSequence[j]['0048021A']['Value'][0];\n      let rowPositionInTotalPixelMatrix = planePositionSlideSequence['0048021F']['Value'][0];\n      let columnPositionInTotalPixelMatrix = planePositionSlideSequence['0048021E']['Value'][0];\n      let rowIndex = Math.ceil(rowPositionInTotalPixelMatrix / columns);\n      let colIndex = Math.ceil(columnPositionInTotalPixelMatrix / rows);\n      let index = rowIndex + '-' + colIndex;\n      let frameNumber = j + 1;\n      frameMapping[index] = frameNumber;\n    }\n  }\n\n  return({\n    sopInstanceUID,\n    rows,\n    columns,\n    totalPixelMatrixColumns,\n    totalPixelMatrixRows,\n    imageVolumeWidth,\n    imageVolumeHeight,\n    pixelSpacing,\n    imageOrientationSlide,\n    frameMapping\n  });\n}\n\nexport { formatImageMetadata };\n","import { WebGLMap } from 'ol/Map';\nimport { View } from 'ol/View';\nimport { TileLayer } from 'ol/layer/Tile';\nimport { XYZ } from 'ol/source/XYZ';\nimport { Projection } from 'ol/proj/Projection';\nimport { TileGrid } from 'ol/tilegrid/TileGrid';\nimport { getExtent } from 'ol/extent/getExtent';\n\n\nimport { formatImageMetadata } from './metadata.js';\n\n\nclass MicroscopyViewer {\n\n  constructor(options) {\n    this.client = options.client;\n    this.studyInstanceUID = options.studyInstanceUID;\n    this.seriesInstanceUID = options.seriesInstanceUID;\n    this.map = null;\n  }\n\n  render(options) {\n    console.log('render images using microscopy viewer')\n    const studyInstanceUID = this.studyInstanceUID;\n    const seriesInstanceUID = this.seriesInstanceUID;\n    if (!('container' in options)) {\n      console.error('container is required to render images')\n    }\n\n    // Search for all instances that are part of the series.\n    const searchInstanceOptions = {\n      studyInstanceUID,\n      seriesInstanceUID\n    };\n    // TODO: We may want to filter instances based on image type or modality.\n    const metadataPromise = client.searchForInstances(searchInstanceOptions).then((instances) => {\n\n      /*\n       * To visualize images accross multiple scales, we first need to\n       * determine the image pyramid structure, i.e. the size and resolution\n       * images at the different pyramid levels.\n       * To this end, we retrieve the metadata for each instance.\n      */\n      const promises = []\n      for (let i = 0; i < instances.length; i++) {\n        const sopInstanceUID = instances[i][\"00080018\"][\"Value\"][0];\n        const retrieveInstanceOptions = {\n          studyInstanceUID,\n          seriesInstanceUID,\n          sopInstanceUID,\n        };\n        const promise = client.retrieveInstanceMetadata(retrieveInstanceOptions).then((metadata) => {\n          // TODO: Use label and localizer images.\n          const imageType = metadata[0][\"00080008\"][\"Value\"];\n          if ( imageType[2] !== \"VOLUME\") {\n            return(null);\n          }\n          return(formatImageMetadata(metadata[0]));\n        });\n        promises.push(promise);\n      }\n      return(Promise.all(promises));\n    });\n\n    const mapPromise = metadataPromise.then((metadata) => {\n      metadata = metadata.filter(m => m);\n\n      const levels = [];\n      for (let i = 0; i < metadata.length; i++) {\n        const cols = metadata[i].totalPixelMatrixColumns;\n        const rows = metadata[i].totalPixelMatrixRows;\n        const paths = metadata[i].paths;\n        /*\n         * Instances may be broken down into multiple concatentation parts.\n         * Therefore, we have to re-assemble instance metadata.\n        */\n        let alreadyExists = false;\n        let index = null;\n        for (let j = 0; j < levels.length; j++) {\n          if (levels[j].totalPixelMatrixColumns === cols && levels[j].totalPixelMatrixRows === rows) {\n            alreadyExists = true;\n            index = j;\n          }\n        }\n        if (alreadyExists) {\n          /*\n           * Update \"paths\" with information obtained from current\n           * concatentation part.\n          */\n          Object.assign(levels[index].paths, paths);\n        } else {\n          levels.push(metadata[i]);\n        }\n      }\n      // Sort levels in ascending order\n      levels.sort(function(a, b) {\n        if(a.totalPixelMatrixColumns < b.totalPixelMatrixColumns) {\n          return -1;\n        } else if(a.totalPixelMatrixColumns > b.totalPixelMatrixColumns) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n\n      /*\n       * Collect relevant information from DICOM metadata for each pyramid\n       * level to construct the Openlayers map.\n      */\n      const tileSizes = [];\n      const totalSizes = [];\n      const resolutions = [];\n      const origins = [[0, -1]];\n      for (let j = 0; j < levels.length; j++) {\n        let columns = levels[j].columns;\n        let rows = levels[j].rows;\n        let totalPixelMatrixColumns = levels[j].totalPixelMatrixColumns;\n        let totalPixelMatrixRows = levels[j].totalPixelMatrixRows;\n        let colFactor = Math.ceil(totalPixelMatrixColumns / columns);\n        let rowFactor = Math.ceil(totalPixelMatrixRows / rows);\n        tileSizes.push([columns, rows]);\n        totalSizes.push([columns * colFactor, rows * rowFactor]);\n\n        /*\n         * Compute the resolution at each pyramid level, since the zoom\n         * factor may not be the same between adjacent pyramid levels.\n        */\n        let zoomFactorColumns =  levels[0].totalPixelMatrixColumns / totalPixelMatrixColumns;\n        let zoomFactorRows =  levels[0].totalPixelMatrixRows / totalPixelMatrixRows;\n        let zoomFactor = (zoomFactorColumns + zoomFactorRows) / 2;\n        resolutions.push(zoomFactor);\n\n        /*\n         * TODO: One may have to adjust the offset slightly due to the\n         * difference between extent of the image at a resolution level\n         * and the actual number of tiles (frames).\n        */\n        let orig = [0, -1]\n        if (j < levels.length-1) {\n          origins.push(orig)\n        }\n      }\n      totalSizes.reverse();\n      tileSizes.reverse();\n      origins.reverse();\n\n      /*\n        * Translate pixel units of total pixel matrix into millimeters of\n        * slide coordinate system\n      */\n      function coordinateFormatFunction(coordinate) {\n        x = (coordinate[0] * levels[levels.length-1].pixelSpacing[0]).toFixed(4);\n        y = (-(coordinate[1] - 1) * levels[levels.length-1].pixelSpacing[1]).toFixed(4);\n        return([x, y]);\n      }\n\n      /*\n       * Define custom tile URL function to retrive frames via DICOMweb\n       * WADO-RS.\n       */\n      function tileUrlFunction(tileCoord, pixelRatio, projection) {\n        /*\n         * Variables x and y correspond to the X and Y axes of the slide\n         * coordinate system. Since we want to view the slide horizontally\n         * with the label on the right side, the x axis of the slide\n         * coordinate system is the vertical axis of the viewport and the\n         * y axis of the slide coordinate system the horizontal axis of the\n         * viewport. Note that this is in contrast to the nomenclature used\n         * by Openlayers.\n         */\n        let z = tileCoord[0];\n        let y = tileCoord[1] + 1;\n        /*\n         * The vertical axis is inverted for the chosen tile source, i.e.\n         * it starts at -1 at the top left corner and descreases along the\n         * vertical axis to the lower left corner of the viewport.\n         */\n        let x = -(tileCoord[2] + 1) + 1;\n        let index = x + \"-\" + y;\n        let frameNumber = levels[z].frameMapping[index];\n        if (frameNumber === undefined) {\n          console.warn(\"tile \" + index + \" not found at level \" + z);\n          return(null);\n        }\n        let url = client.baseUrl +\n          \"/studies/\" + studyInstanceUID +\n          \"/series/\" + seriesInstanceUID +\n          '/instances/' + levels[z].sopInstanceUID +\n          '/frames/' + frameNumber;\n        return(url);\n      }\n\n      /*\n       * Define custonm tile loader function, which is required because the\n       * WADO-RS response message has content type \"multipart/related\".\n      */\n      const transferSyntaxUIDToMimeSubType = {\n          '1.2.840.10008.1.2.4.50': 'jpeg',\n          '1.2.840.10008.1.2.4.80': 'x-jls',\n          '1.2.840.10008.1.2.4.90': 'jp2'\n      }\n      function tileLoadFunction(tile, src) {\n        if (src !== null) {\n          let studyInstanceUID = DICOMwebClient.utils.getStudyInstanceUIDFromUri(src);\n          let seriesInstanceUID = DICOMwebClient.utils.getSeriesInstanceUIDFromUri(src);\n          let sopInstanceUID = DICOMwebClient.utils.getSOPInstanceUIDFromUri(src);\n          let frameNumbers = DICOMwebClient.utils.getFrameNumbersFromUri(src);\n          // FIXME: Determine transfer syntax and map to mime subtype\n          // FIXME: Determine zoom level from \"tile\"\n          let transferSyntaxUID = '1.2.840.10008.1.2.4.50';\n          let imageSubtype = transferSyntaxUIDToMimeSubType[transferSyntaxUID];\n          let retrieveOptions = {\n            studyInstanceUID,\n            seriesInstanceUID,\n            sopInstanceUID,\n            frameNumbers,\n            imageSubtype\n          };\n          client.retrieveInstanceFrames(retrieveOptions).then((frames) => {\n            let pixels = frames[0];\n            // Encode pixel data as base64 string\n            const encodedPixels = btoa(String.fromCharCode(...new Uint8Array(pixels)));\n            // Add pixel data to image\n            tile.getImage().src = \"data:image/\" + imageSubtype + \";base64,\" + encodedPixels;\n\n            // console.log('DRAW IMAGE ON CANVAS')\n            // const canvas = document.createElement('canvas');\n            // canvas.width = 512;\n            // canvas.height = 512;\n            // const ctx = canvas.getContext('2d');\n            // ctx.strokeStyle = 'black';\n            // ctx.strokeRect(0.5, 0.5, 512 + 0.5, 512 + 0.5);\n            // tile.image_ = ctx.canvas;\n            // console.log(tile.getImage());\n\n          });\n        } else {\n          console.warn('could not load tile');\n        }\n      }\n\n      /*\n       * Frames may extend beyond the size of the total pixel matrix.\n       * The excess pixels are empty, i.e. have only a padding value.\n       * We set the extent to the size of the actual image without taken\n       * excess pixels into account.\n       * Note that the vertical axis is flipped in the used tile source,\n       * i.e. values on the axis lie in the range [-n, -1], where n is the\n       * number of rows in the total pixel matrix.\n      */\n      const extent = [\n        0,                                  // min X\n        -levels[0].totalPixelMatrixRows,    // min Y\n        levels[0].totalPixelMatrixColumns,  // max X\n        -1                                  // max Y\n      ];\n\n      /*\n       * Determine whether image needs to be rotated relative to slide\n       * coordinate system based on direction cosines.\n       * There are only planar rotations, since the total pixel matrix is\n       * parallel to the slide surface. Here, we further assume that rows and\n       * columns of total pixel matrix are parallel to the borders of the slide,\n       * i.e. the x and y axis of the slide coordinate system.\n       * Hence, we only account for the case where the image may be rotated by\n       * 180 degrees.\n      */\n      var degrees = 0;\n      if (\n        (levels[levels.length-1].imageOrientationSlide[1] === -1) &&\n        (levels[levels.length-1].imageOrientationSlide[3] === -1)\n      ) {\n        /*\n         * The row direction (left to right) of the total pixel matrix\n         * is defined by the first three values.\n         * The three values specify how the direction changes from the last pixel\n         * to the first pixel in the row along each of the three axes of the\n         * slide coordinate system (x, y, z), i.e. it express in which direction one\n         * is moving in the slide coordinate system when the COLUMN index changes.\n         * The column direction (top to bottom) of the total pixel matrix\n         * is defined by the first three values.\n         * The three values specify how the direction changes from the last pixel\n         * to the first pixel in the column along each of the three axes of the\n         * slide coordinate system (x, y, z), i.e. it express in which direction one\n         * is moving in the slide coordinate system when the ROW index changes.\n        */\n        degrees = 180;\n      }\n      const rotation = degrees * (Math.PI / 180);\n\n      /*\n       * Specify projection to prevent default automatic projection\n       * with the default Mercator projection.\n       */\n      const projection = new Projection({\n        code: \"NONE\",\n        units: 'm',\n        extent: extent,\n        // FIXME: is point resolution computed correctly?\n        getPointResolution: function(pixelRes, point) {\n          /*\n           * Pixel spacing has in millimeter unit while the projection has\n           * has meter unit.\n           */\n          // FIXME: is this correct?\n          let spacing = levels[levels.length-1].pixelSpacing[1] * 10**3;\n          let metricRes = pixelRes * spacing;\n          return(metricRes);\n        }\n      });\n      /*\n       * TODO: register custom projection:\n       *  - http://openlayers.org/en/latest/apidoc/ol.proj.html\n       *  - http://openlayers.org/en/latest/apidoc/module-ol_proj.html#~ProjectionLike\n       * TODO: Direction cosines could be handled via projection rather\n       * than specifying a rotation\n       */\n\n      /*\n       * We need to specify the tile grid, since DICOM allows tiles to\n       * have different sizes at each resolution level and a different zoom\n       * factor between individual levels.\n       */\n      const tileGrid = new TileGrid({\n        extent: extent,\n        origins: origins,\n        resolutions: resolutions,\n        sizes: totalSizes,\n        tileSizes: tileSizes\n      });\n\n      /*\n       * We use the implemented XYZ tile source but customize it to retrieve\n       * frames (load tiles) via DICOMweb WADO-RS.\n       */\n      const source = new XYZ({\n        crossOrigin: \"Anonymous\",\n        tileGrid: tileGrid,\n        projection: projection\n      });\n      source.setTileUrlFunction(tileUrlFunction);\n      source.setTileLoadFunction(tileLoadFunction);\n\n      const layer = new TileLayer({\n        extent: extent,\n        source: source,\n        preload: 2,\n        projection: projection\n      });\n\n      const view = new View({\n        center: getCenter(extent),\n        extent: extent,\n        projection: projection,\n        resolutions: resolutions,\n        rotation: rotation\n      });\n\n      const overviewView = new View({\n        projection: projection,\n        resolutions: resolutions,\n        rotation: rotation\n      });\n\n      /*\n       * Creates the map with the defined layers and view and renders it via\n       * WebGL.\n       */\n      this.map = new WebGLMap({\n        layers: [layer],\n        view: view,\n        target: options.container,\n        // TODO: allow configuration (styling) of controls\n        controls: [\n          new ol.control.OverviewMap({\n            view: overviewView,\n            collapsed: true\n          }),\n          new ol.control.Zoom(),\n          new ol.control.ZoomSlider(),\n          new ol.control.FullScreen(),\n          new ol.control.ScaleLine({units: 'metric'})\n        ],\n        loadTilesWhileAnimating: true,\n        loadTilesWhileInteracting: true,\n        logo: false\n      });\n      this.map.getView().fit(extent);\n      return(this.map);\n    });\n    return(mapPromise);\n  }\n\n}\n\nexport { MicroscopyViewer };\n","import { MicroscopyViewer } from './api.js';\n\nlet api = {\n  MicroscopyViewer,\n};\n\nexport { api };\n"],"names":["Projection","TileGrid","XYZ","TileLayer","View","WebGLMap"],"mappings":"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"}